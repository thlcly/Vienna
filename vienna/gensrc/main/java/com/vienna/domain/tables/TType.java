/**
 * This class is generated by jOOQ
 */
package com.vienna.domain.tables;


import com.vienna.domain.Keys;
import com.vienna.domain.Vienna;
import com.vienna.domain.tables.records.TTypeRecord;
import com.vienna.model.converters.TimestampConverter;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.joda.time.DateTime;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TType extends TableImpl<TTypeRecord> {

    private static final long serialVersionUID = -267036741;

    /**
     * The reference instance of <code>vienna.t_type</code>
     */
    public static final TType T_TYPE = new TType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TTypeRecord> getRecordType() {
        return TTypeRecord.class;
    }

    /**
     * The column <code>vienna.t_type.ID</code>. 主键id
     */
    public final TableField<TTypeRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "主键id");

    /**
     * The column <code>vienna.t_type.NAME</code>. 类型名称
     */
    public final TableField<TTypeRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "类型名称");

    /**
     * The column <code>vienna.t_type.DESCRIPTIONS</code>. 类型描述
     */
    public final TableField<TTypeRecord, String> DESCRIPTIONS = createField("DESCRIPTIONS", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "类型描述");

    /**
     * The column <code>vienna.t_type.NUMBER</code>. 问题类型发生的数量
     */
    public final TableField<TTypeRecord, Integer> NUMBER = createField("NUMBER", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "问题类型发生的数量");

    /**
     * The column <code>vienna.t_type.CREATED</code>. 创建时间
     */
    public final TableField<TTypeRecord, DateTime> CREATED = createField("CREATED", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间", new TimestampConverter());

    /**
     * The column <code>vienna.t_type.UPDATED</code>. 更新时间
     */
    public final TableField<TTypeRecord, DateTime> UPDATED = createField("UPDATED", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间", new TimestampConverter());

    /**
     * The column <code>vienna.t_type.STATUS</code>. 状态（1：正常，0：删除）
     */
    public final TableField<TTypeRecord, Boolean> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "状态（1：正常，0：删除）");

    /**
     * Create a <code>vienna.t_type</code> table reference
     */
    public TType() {
        this("t_type", null);
    }

    /**
     * Create an aliased <code>vienna.t_type</code> table reference
     */
    public TType(String alias) {
        this(alias, T_TYPE);
    }

    private TType(String alias, Table<TTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TType(String alias, Table<TTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Vienna.VIENNA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TTypeRecord> getPrimaryKey() {
        return Keys.KEY_T_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<TTypeRecord>>asList(Keys.KEY_T_TYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TType as(String alias) {
        return new TType(alias, this);
    }

    /**
     * Rename this table
     */
    public TType rename(String name) {
        return new TType(name, null);
    }
}
